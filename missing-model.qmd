---
pagetitle: "Feature Engineering A-Z | Model Based Imputation"
---

# Model Based Imputation {#sec-missing-model}

::: {style="visibility: hidden; height: 0px;"}
## Model Based Imputation
:::

In model-based imputation, this is where we get the remaining types of imputation that we can use. It is quite a big and broad topic. This chapter will try to do it justice.

We start with simpler methods. Remember, this chapter specifically refers to methods where more than one variable is being used for the imputation. So we could do grouped versions of the simple imputation methods seen in @sec-missing-simple. Instead of imputing with the mean, you impute with the mean within a given group as defined by another categorical variable.

You could also fit a linear regression model with the target variable as the variable you intend to impute, and other complete variables as predictors.

::: {.callout-caution}
# TODO

add diagram
:::

This idea will extend into most other types of models. K-nearest neighbors and trees are common models for this task. For these models, you need to make sure that the predictors can be used. So they will need to not have any missing values themselves. You could in theory use a series of models you impute variables with missing data, which then will be used as predictors to predict another variable.

::: {.callout-caution}
# TODO

figure out if MICE is applicable here
:::

## Pros and Cons

### Pros

- Likely get better performance than simple imputation

### Cons

- More complex model
- lower interpretability

## R Examples

There are a number of steps in the recipes package that fall under this category. Within that, we have `step_impute_bag()`, `step_impute_knn()`, and `step_impute_linear()`.

::: {.callout-caution}
# TODO

find a better data set
:::

Below we are showing how we can impute using a K-nearest neighbor model using `step_impute_knn()`. We specify the variable to impute on first, and then with `impute_with` we specify which variables are used as predictors in the model.

```{r}
#| message: false
library(recipes)

impute_knn_rec <- recipe(mpg ~ ., data = mtcars) |>
  step_impute_knn(disp, neighbors = 1, impute_with = imp_vars(vs, am, hp, drat))

impute_knn_rec |>
  prep() |>
  juice()
```

## Python Examples
