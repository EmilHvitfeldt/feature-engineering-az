---
pagetitle: "Feature Engineering A-Z | M-Estimator Encoding"
---

# M-Estimator Encoding {#sec-categorical-m-estimator}

::: {style="visibility: hidden; height: 0px;"}
## M-Estimator Encoding
:::

The M-estimator encoding method is another variation of [Target Encoding](@sec-categorical-target). This page will explain how M-estimator encoding is different from target encoding, so it is encouraged to read that chapter first.

The idea behind M-estimator encoding is the same as the other target encoding methods. But we are using a different mean, namely [M-estimator](https://en.wikipedia.org/wiki/M-estimator) which is a statistical estimator that is less influenced by extreme values in the target value.

We use the following formula to calculate the effect of each level.

$$
M_i = \dfrac{\text{count}(category_i) \cdot \text{mean}(category_i) + M \cdot \text{mean}(target)}{\text{count}(category_i) + M}
$$

Note that it contains a hyperparameter $M$. This value has to be tuned, and will thus invite data leakage if not tuned correctly.

The method by itself doesn't perform shrinkage so you run into issues associated with lack of shrinkage.

## Pros and Cons

### Pros

- Robust to extreme values in target

### Cons

- Has to be tuned

## R Examples

Not yet implemented

```{r}
#| label: tmp
#| eval: false
#| echo: false
1+1
```

## Python Examples

```{python}
#| label: python-setup
#| echo: false
import pandas as pd
from sklearn import set_config

set_config(transform_output="pandas")
pd.set_option('display.precision', 3)
```

We are using the `ames` data set for examples.
{category_encoders} provided the `MEstimateEncoder()` method we can use.

```{python}
#| label: mestimateencoder
from feazdata import ames
from sklearn.compose import ColumnTransformer
from category_encoders.m_estimate import MEstimateEncoder

ct = ColumnTransformer(
    [('mestimate', MEstimateEncoder(), ['MS_Zoning'])], 
    remainder="passthrough")

ct.fit(ames, y=ames[["Sale_Price"]].values.flatten())
ct.transform(ames)
```
