---
pagetitle: "Feature Engineering A-Z | Trigonometric"
---

# Trigonometric {#sec-circular-trig}

::: {style="visibility: hidden; height: 0px;"}
## Trigonometric
:::

One of the most common ways of dealing with circular data is handled by applying the trigonometric funtions `sin()` and `cos()` to the circular variable. 

TODO: add formulas about offset, cycle size and frequency

I think that this is easier to see with some toy visualizations.
The following toy data set contains highly significant circular effect.

```{r}
library(tidyverse)
set.seed(1234)

toy_data <- tibble(
  predictor = 1:1000
) |>
  mutate(target = pmax(sin(predictor / 365 * pi * 2), 0) ^ 4 + 
                  rnorm(n(), sd = 0.1) - 0.5) |>
  arrange(target)
```

```{r}
toy_data |>
  ggplot(aes(predictor, target)) +
  geom_point()
```

If we were to take the `sin()` and `cos()` of the predictor,
using appropiate cycle size and frequency we can overlay them on the previous chart

```{r}
library(recipes)
recipe(target ~ predictor, toy_data) |>
    step_harmonic(predictor, cycle_size = 365, frequency = 1, keep_original_cols = TRUE) |>
    prep() |>
    bake(new_data = NULL) |>
    pivot_longer(-predictor) |>
    ggplot(aes(predictor, value, color = name)) +
    geom_point() +
    theme(legend.position = "bottom")
```

We notice that the `sin()` transformation somehow captures the circular nature of the data.
It obviously can't fully capture the effect since the relationship isn't a perfect sine curve.

The effect might be more noticible if we change the way we visualize this effect.

```{r}
library(recipes)
recipe(target ~ predictor, toy_data) |>
    step_harmonic(predictor, cycle_size = 365, frequency = 1) |>
    prep() |>
    bake(new_data = NULL) |>
    ggplot(aes(predictor_sin_1, predictor_cos_1, color = target)) +
    geom_point() +
    scale_color_viridis_c()
```

in this simple case, the `predictor_sin_1` becomes a ideal predictor.
on the other hand, `predictor_cos_1` doesn't do as well since it doesn't allow for a clean seperation between high and low `target` values.
All the high values appears when `predictor_cos_1` is close to 0, 
but not all observations where `predictor_cos_1` is close to 0 have high target values.

Above we got lucky that we picked the right cycle size and frequency,
since we knew them, if you are off, even by a bit you can get uninformative transformations like the one below.

```{r}
library(recipes)
recipe(target ~ predictor, toy_data) |>
    step_harmonic(predictor, cycle_size = 150, frequency = 1) |>
    prep() |>
    bake(new_data = NULL) |>
    ggplot(aes(predictor_sin_1, predictor_cos_1, color = target)) +
    geom_point() +
    scale_color_viridis_c()
```

there is also the importane of the starting point.
We got lucky that that it gave 1 good predictor and one bad predictor.
Even if the frequency is good, 
but the starting point is off you end up with two decent predictors.
These two predictors are still good enough, but they are less ideal than the first example we got.

```{r}
library(recipes)
recipe(target ~ predictor, toy_data) |>
    step_harmonic(predictor, cycle_size = 365, frequency = 1, starting_val = 45) |>
    prep() |>
    bake(new_data = NULL) |>
    ggplot(aes(predictor_sin_1, predictor_cos_1, color = target)) +
    geom_point() +
    scale_color_viridis_c()
```

Ene of the issues with this approach is that each variable contains double information.
E.i. you need both variable to detect "summer".

One of the downsides to taking both the `sin()` and `cos()` of a predictor,
is that is is unlikely that both of them captures the effect well.
You might get one good and one bad, or both decent.
I find that you can eliminate this issue by only calculating `sin()`.
For a sufficiently circular effect and proper placement,
a single `sin()` is going to be more effective than both `sin()` and `cos()`.
This is esspecially true since `cos()` is a shift of `sin()` by definition.

Propose now we have multiple circular signals.
They could be shifted versions of each other,
think halloween, christmas, and valentines day.
Or they chould have different periods.
This would be hard to handle using a single set of curves,
and we thus have to create one for each circular pattern.
This is also where the decision to only do `sin()` instead of both helps,
as we are trying to limit redundant or ineffective predictors from being created.

```{r}
toy_data_two <- tibble(
  predictor = 1:1000
) |>
  mutate(target = pmax(sin(predictor / 365 * pi * 2), 0) ^ 4 + 
                  rnorm(n(), sd = 0.1) - 0.5) |>
  mutate(target = target + pmax(sin((predictor-125)/ 200 * pi * 2), 0) ^ 4 * 0.6) |>
  arrange(target)
```

```{r}
toy_data_two |>
  ggplot(aes(predictor, target)) +
  geom_point()
```

```{r}
recipe(target ~ predictor, toy_data_two) |>
    step_harmonic(predictor, cycle_size = 365, frequency = 1, keep_original_cols = TRUE) |>
    step_rename(predictor_sin_one = predictor_sin_1) |>
    step_rm(predictor_cos_1) |>
    step_harmonic(predictor, cycle_size = 200, frequency = 1, starting_val = 125, keep_original_cols = TRUE) |>
    step_rename(predictor_sin_two = predictor_sin_1) |>
    step_rm(predictor_cos_1) |>
    prep() |>
    bake(new_data = NULL) |>
    pivot_longer(-predictor) |>
    ggplot(aes(predictor, value, color = name)) +
    geom_point() +
    theme(legend.position = "bottom")
```

TODO: find way to see if we can capture how effective this model would be.

talk about how the shape of the activation might not be ideal, and something we can handle in later chapters

```{r}
library(animalshelter)
library(tidyverse)

longbeach
  glimpse()
```

## Pros and Cons

### Pros

### Cons

## R Examples

## Python Examples
