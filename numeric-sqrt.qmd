---
pagetitle: "Feature Engineering A-Z | Square Root"
---

# Square Root {#sec-numeric-sqrt}

::: {style="visibility: hidden; height: 0px;"}
## Square Root
:::

As we saw in @sec-numeric-logarithms about logarithms, we sometimes have to deal with highly skewed data.
Square roots are another way to deal with this issue, with some different pros and cons that make it better to use us in some situations.
We will spend our time in this section to talk about what those are.

Below is a histogram of the average daily rate of the number of hotel stays.
It is clear to see that this is another case where the data is highly skewed, with many values close to zero, but a few in the thousands.

```{r}
#| echo: false
#| message: false
#| fig-cap: "Histogram of Average Daily Rate"
#| fig-alt: "Highly right skewed histogram of Average Daily Rate"

library(tidymodels)

# TODO find data set with more negative values
hotel_bookings <- readr::read_csv("data/hotel_bookings.csv")

hotel_bookings |>
  ggplot(aes(adr)) +
  geom_histogram(bins = 100) +
  theme_minimal() +
  labs(x = "Average Daily Rate")
```

This variable contains some negative values with the smallest being `r min(hotel_bookings$adr)`.
We wouldn't want to throw out the negative values.
And we could think of many situations where both negative and positive values are part of a skewed distribution, especially financial.
Bank account balances, delivery times, etc etc.

We need a method that transforms the scale to un-skew and also works with negative data.
The square root could be what we are looking for.
By itself, it takes as its input a positive number and returns the number that when multiplied by itself equals the input.
This has the desired shrinking effect, where larger values are shrunk more than smaller values.
Additionally, since its domain is the positive numbers (0 is a special case since it maps to itself) we can mirror it to work on negative numbers in the same way it worked on positive numbers.
This gives us the signed square root

$$
y = \text{sign}(x)\sqrt{\left| x \right|}
$$

Below we see the results of applying the signed square root.

```{r}
#| echo: false
#| message: false
#| fig-cap: "Histogram of squared Average Daily Rate"
#| fig-alt: "Histogram of squared Average Daily Rate, less skewed"

hotel_bookings |>
  mutate(adr = sign(adr) * sqrt(abs(adr))) |>
  ggplot(aes(adr)) +
  geom_histogram(bins = 100) +
  theme_minimal() +
  labs(x = "Squared Average Daily Rate")
```

it is important to note that we are not trying to make the variable normally distributed.
What we are trying to accomplish is to remove the skewed nature of the variable.
Likewise, this method should not be used as a variance reduction tool as that task is handled by doing normalization which we start exploring more in @sec-numeric-scaling-issues.

It doesn't have the same power to shrink large values as logarithms do, but it will seamlessly work with negative values and it would allow you to pick up on quadratic effects that you wouldn't otherwise be able to pick up if you hadn't applied the transformation.
It also doesn't have good inferential properties.
It preserves the order of the numeric values, but it doesn't give us a good way to interpret changes.

## Pros and Cons

### Pros

-   A non-trained operation, can easily be applied to training and testing data sets alike
-   Can be applied to all numbers, not just non-negative values

### Cons

-   It will leave regression coefficients virtually uninterpretable
-   Is not a universal fix. While it can make skewed distributions less skewed. It has the opposite effect on a distribution that isn't skewed

## R Examples

We will be using the `hotel_bookings` data set for these examples.

```{r}
library(recipes)

hotel_bookings |>
  select(lead_time, adr)
```

{recipes} provides a step to perform logarithms, which out of the box uses $e$ as the base with an offset of 0.

```{r}
sqrt_rec <- recipe(lead_time ~ adr, data = hotel_bookings) |>
  step_sqrt(adr)

sqrt_rec |>
  prep() |>
  bake(new_data = NULL)
```

if you want to do a signed square root instead, you can use `step_mutate()` which allows you to do any kind of transformations

```{r}
signed_sqrt_rec <- recipe(lead_time ~ adr, data = hotel_bookings) |>
  step_mutate(adr = sqrt(abs(adr)) * sign(adr))

signed_sqrt_rec |>
  prep() |>
  bake(new_data = NULL)
```

## Python Examples

```{python}
#| echo: false
import pandas as pd
from sklearn import set_config

set_config(transform_output="pandas")
pd.set_option('display.precision', 3)
```

We are using the `ames` data set for examples.
Since there isn't a built-in transformer for square root, we can create our own using `FunctionTransformer()` and `numpy.sqrt()`.

```{python}
from feazdata import ames
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import FunctionTransformer
import numpy as np

sqrt_transformer = FunctionTransformer(np.sqrt)

ct = ColumnTransformer(
    [('sqrt', sqrt_transformer, ['Wood_Deck_SF'])], 
    remainder="passthrough")

ct.fit(ames)
ct.transform(ames)
```

We can also create and perform a signed square root transformation, by creating a function for `signed_sqrt()` and then using it in `FunctionTransformer()` as before

```{python}
def signed_sqrt(x):
  return np.sqrt(np.abs(x)) * np.sign(x)

signed_sqrt_transformer = FunctionTransformer(signed_sqrt)

ct = ColumnTransformer(
    [('signed_sqrt', signed_sqrt_transformer, ['Wood_Deck_SF'])], 
    remainder="passthrough")

ct.fit(ames)
ct.transform(ames)
```