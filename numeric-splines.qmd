# Splines {#sec-splines}

**Splines**, is one way to represent a curve that makes it useful in a modeling content, since it allows us to model non-linear relationships between predictors and outcomes.

```{r}
#| echo: false
set.seed(1234)
data <- tibble::tibble(
  predictor = rnorm(100) + 1:100
) |>
  dplyr::mutate(outcome = sin(predictor/25) + rnorm(100, sd = 0.1) + 10)
```



```{r}
#| label: fig-splines-predictor-outcome
#| echo: false
#| message: false
#| fig-cap: |
#|   Non-linear relationship between predictor and outcome.
#| fig-alt: |
#|   Scatter chart. Predictor along the x-axis and outcome along the y-axis.
#|   The data has some wiggliness to it, but it follows a curve. You would not 
#|   be able to fit a straight line to this data.
library(ggplot2)

data |>
  ggplot(aes(predictor, outcome)) +
  geom_point() +
  theme_minimal()
```



```{r}
#| echo: false
library(recipes)

data_splines <- recipe(outcome ~ predictor, data = data) |>
  step_bs(predictor, keep_original_cols = TRUE, degree = 10) |>
  prep() |>
  bake(new_data = data) |>
  select(-predictor_bs_10)
```



```{r}
#| label: fig-splines-spline-curves
#| echo: false
#| message: false
#| fig-cap: |
#|   Each part of the spline detects a part of the data set.
#| fig-alt: |
#|   Facetted line chart. Predictor along the x-axis, value along the y-axis.
#|   Each of the curves start at 0, goes to smoothly, and then down to zero.
#|   The highpoint for each curve goes further to the right for each curve 
#|   shown.
data_splines |>
  select(-outcome) |>
  tidyr::pivot_longer(cols = -predictor) |>
  ggplot(aes(predictor, value)) +
  geom_line() +
  facet_wrap(~name) +
  theme_minimal()
```



```{r}
#| label: fig-splines-spline-highlight
#| echo: false
#| message: false
#| fig-cap: |
#|   Each part of the spline detects a part of the data set.
#| fig-alt: |
#|   Facetted scatter chart. Predictor along the x-axis, outcome along the 
#|   y-axis. Each of the facets shows the same non-linear relationship between
#|   predictor and outcome. Color is used to show how each spline term 
#|   highlights a different part of the predictor. The highlight goes further 
#|   to the right for each facet.
data_splines |>
  tidyr::pivot_longer(cols = -c(outcome, predictor)) |>
  ggplot(aes(predictor, outcome, color = value)) +
  geom_point() +
  facet_wrap(~name) +
  scale_color_viridis_c() +
  theme_minimal()
```



```{r}
#| label: fig-splines-spline-outcome
#| echo: false
#| message: false
#| fig-cap: |
#|   Some spline terms have better relationship to the outcome than others.
#| fig-alt: |
#|   Facetted scatter chart. Spline value along the x-axis, outcome along the 
#|   y-axis. Each facet shows the relationship between one of the spline terms
#|   and the outcome. Some of them are non-linear, and a couple of them are 
#|   fairly linear. A fitted line is overlaid in blue.
data_splines |>
  tidyr::pivot_longer(cols = -c(outcome, predictor)) |>
  ggplot(aes(value, outcome)) +
  geom_point() +
  geom_smooth(method = "lm", formula = "y ~ x", se = FALSE) +
  facet_wrap(~name) +
  scale_color_viridis_c() +
  theme_minimal()
```

One thing to note, is that you will get back correlated features when using splines.

```{r}
#| label: fig-splines-correlation
#| echo: false
#| message: false
#| fig-cap: |
#|   Neightboring features are highly correlated, and anti correlated with 
#|   far away features.
#| fig-alt: |
#|   Correlation chart. The spline basis features are lined up one after
#|   another. Neightboring features show high correlation, features 2 apart are
#|   slightly correlated, and other features are anti correlated.
data_splines |>
  dplyr::select(-predictor, -outcome) |>
  corrr::correlate(quiet = TRUE) |>
  autoplot(method = "identity")
```




```{r}
#| echo: false
data_example <- data.frame(x = rnorm(10000))

plot_convex <- recipe(~ x, data = data_example) |>
  step_spline_convex(x, keep_original_cols = TRUE, deg_free = 5) |>
  prep() |>
  bake(new_data = data_example) |>
  tidyr::pivot_longer(-x) |>
  ggplot(aes(x, value, color = name)) +
  geom_line() +
  guides(color = "none") +
  theme_minimal() +
  labs(title = "C-spline")

plot_monotone <- recipe(~ x, data = data_example) |>
  step_spline_monotone(x, keep_original_cols = TRUE, deg_free = 5) |>
  prep() |>
  bake(new_data = data_example) |>
  tidyr::pivot_longer(-x) |>
  ggplot(aes(x, value, color = name)) +
  geom_line() +
  guides(color = "none") +
  theme_minimal() +
  labs(title = "M-spline")

plot_natural <- recipe(~ x, data = data_example) |>
  step_spline_natural(x, keep_original_cols = TRUE, deg_free = 5, 
                      complete_set = TRUE) |>
  prep() |>
  bake(new_data = data_example) |>
  tidyr::pivot_longer(-x) |>
  ggplot(aes(x, value, color = name)) +
  geom_line() +
  guides(color = "none") +
  theme_minimal() +
  labs(title = "Natural spline")

plot_b <- recipe(~ x, data = data_example) |>
  step_spline_b(x, keep_original_cols = TRUE, deg_free = 5,
                options = list(periodic = TRUE), complete_set = TRUE) |>
  prep() |>
  bake(new_data = tibble(x = seq(-3, 15, by = 0.01))) |>
  tidyr::pivot_longer(-x) |>
  ggplot(aes(x, value, color = name)) +
  geom_line() +
  guides(color = "none") +
  theme_minimal() +
  labs(title = "Periodic b-spline")
```


```{r}
#| label: fig-splines-types-of-splines
#| echo: false
#| message: false
#| fig-cap: |
#|   Neightboring features are highly correlated, and anti correlated with 
#|   far away features.
#| fig-alt: |
#|   4 charts in a grid. Each representing a different type of spline. The 
#|   C-splines here are all increasing at different rates of change. The 
#|   M-splines are appear to have a sigmoidal shape, starting at 0 and ending 
#|   at 1. The natural splines looks very similar to the basis splines we saw
#|   earlier. And the last chart, shows a pariodic b-spline. These splines are
#|   the same kind as earlier, but they have been modified to repeat at a
#|   specific interval.
library(patchwork)
(plot_convex + plot_monotone) / (plot_natural + plot_b)
```

## Pros and Cons

### Pros

### Cons

## R Examples

### Python Examples
